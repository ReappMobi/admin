/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthInstitutionsImport } from './routes/_auth/institutions'
import { Route as AuthDonationsImport } from './routes/_auth/donations'
import { Route as publicLoginImport } from './routes/(public)/login'

// Create/Update Routes

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthInstitutionsRoute = AuthInstitutionsImport.update({
  id: '/institutions',
  path: '/institutions',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthDonationsRoute = AuthDonationsImport.update({
  id: '/donations',
  path: '/donations',
  getParentRoute: () => AuthRouteRoute,
} as any)

const publicLoginRoute = publicLoginImport.update({
  id: '/(public)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)/login': {
      id: '/(public)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicLoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/donations': {
      id: '/_auth/donations'
      path: '/donations'
      fullPath: '/donations'
      preLoaderRoute: typeof AuthDonationsImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/institutions': {
      id: '/_auth/institutions'
      path: '/institutions'
      fullPath: '/institutions'
      preLoaderRoute: typeof AuthInstitutionsImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthDonationsRoute: typeof AuthDonationsRoute
  AuthInstitutionsRoute: typeof AuthInstitutionsRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthDonationsRoute: AuthDonationsRoute,
  AuthInstitutionsRoute: AuthInstitutionsRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof publicLoginRoute
  '/donations': typeof AuthDonationsRoute
  '/institutions': typeof AuthInstitutionsRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof publicLoginRoute
  '/donations': typeof AuthDonationsRoute
  '/institutions': typeof AuthInstitutionsRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/(public)/login': typeof publicLoginRoute
  '/_auth/donations': typeof AuthDonationsRoute
  '/_auth/institutions': typeof AuthInstitutionsRoute
  '/_auth/': typeof AuthIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/donations' | '/institutions' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/donations' | '/institutions' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/(public)/login'
    | '/_auth/donations'
    | '/_auth/institutions'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  publicLoginRoute: typeof publicLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  publicLoginRoute: publicLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/(public)/login"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/donations",
        "/_auth/institutions",
        "/_auth/"
      ]
    },
    "/(public)/login": {
      "filePath": "(public)/login.tsx"
    },
    "/_auth/donations": {
      "filePath": "_auth/donations.tsx",
      "parent": "/_auth"
    },
    "/_auth/institutions": {
      "filePath": "_auth/institutions.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
